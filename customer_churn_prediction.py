# -*- coding: utf-8 -*-
"""customer churn prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11rIPVabl2Ok525GMqe8qe9twlEmc0Sro
"""

import pandas as pd
import numpy as np
import sklearn
import matplotlib.pyplot as plt
import seaborn as sns

cus_churn = pd.read_csv('/content/Churn_Modelling.csv')

cus_churn.head()

cus_churn.shape

cus_churn.size

cus_churn.columns = cus_churn.columns.str.strip()

cus_churn.columns=cus_churn.columns.str.lower()

cus_churn.columns

cus_churn.isnull().sum()

cus_churn[cus_churn.duplicated(subset=['customerid'], keep=False)]

cus_churn.info()

cus_churn.describe()

cus_churn.describe()

cus_churn.isnull().sum()

plt.figure(figsize=(15,5))
sns.countplot(data=cus_churn,x='exited')

cus_churn.columns

cus_churn['exited'].value_counts().to_frame()

from sklearn.utils import resample

cus_churn_majority = cus_churn[cus_churn['exited']==0]
cus_churn_minority = cus_churn[cus_churn['exited']==1]

cus_churn_majority_downsample=resample(cus_churn_majority, n_samples=2037,replace=False, random_state=42)

cus_churn_df=pd.concat([cus_churn_majority_downsample, cus_churn_minority])

cus_churn_df['exited'].value_counts().to_frame()

plt.figure(figsize=(15,5))
sns.countplot(data=cus_churn_df, x='exited')

cus_churn_df.columns

cus_churn_df.drop(['rownumber','customerid','surname','geography','gender'], axis=1, inplace=True)

cus_churn_df.corr()

plt.figure(figsize=(15,5))
sns.heatmap(cus_churn_df.corr(), annot=True)

df_cus_churn_exit = cus_churn_df.corr()['exited'].to_frame()

plt.figure(figsize=(15,5))
sns.barplot(data=df_cus_churn_exit, x=df_cus_churn_exit.index, y='exited')

x=cus_churn_df.drop(['exited'], axis=1)
y=cus_churn_df['exited']

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.3,random_state=42)

x_train.shape, x_test.shape, y_train.shape, y_test.shape

from sklearn.linear_model import LogisticRegression

logreg = LogisticRegression(max_iter=500)

logreg.fit(x_train,y_train)

logreg.score(x_train,y_train)

y_preds = logreg.predict(x_test)

from sklearn.metrics import confusion_matrix, recall_score, precision_score, accuracy_score, f1_score, ConfusionMatrixDisplay

precision_score(y_test, y_preds)

accuracy_score(y_test, y_preds)

f1_score(y_test, y_preds)

cmd=ConfusionMatrixDisplay(confusion_matrix=confusion_matrix(y_test,y_preds,labels=logreg.classes_),display_labels=logreg.classes_)
cmd.plot()

